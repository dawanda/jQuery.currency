#!/usr/bin/env node

const path    = require("path")
    , fs      = require("fs.extra")
    , program = require("commander")
    , version = JSON.parse(fs.readFileSync(__dirname + '/../package.json')).version
    , Helpers = require("./helpers")
    , wrench  = require("wrench")
    , exec    = require('child_process').exec

program.version(version)

program
  .command('init')
  .description("Initializes the current project folder. You'll get TDD, minification, folder structure, ...")
  .option('-l, --license', "Add the MIT license to the project folder and the README.")
  .action(function(env) {
    var folders = ['dist', 'lib', 'spec', 'src']
    var files   = [
      {
        src: 'templates/lib/jquery-1.7.2.min.js',
        target: 'lib/jquery-1.7.2.min.js'
      }, {
        src: 'templates/dist/compiler.jar',
        target: 'dist/compiler.jar'
      }, {
        src: 'templates/spec/buster.js',
        target: 'spec/buster.js'
      }, {
        src: 'templates/spec/jquery.skeleton.spec.js',
        target: 'spec/jquery.' + Helpers.getTargetProjectName() + '.spec.js',
        callback: function() {
          Helpers.replaceSkeletonInFile(process.cwd() + '/spec/jquery.' + Helpers.getTargetProjectName() + '.spec.js')
        }
      }, {
        src: 'templates/src/jquery.skeleton.js',
        target: 'src/jquery.' + Helpers.getTargetProjectName() + '.js',
        callback: function() {
          Helpers.replaceSkeletonInFile(process.cwd() + '/src/jquery.' + Helpers.getTargetProjectName() + '.js')
        }
      }, {
        src: '.travis.yml',
        target: '.travis.yml',
        callback: Helpers.addTravisConfig
      }
    ]

    folders.forEach(function(folder) {
      Helpers.createFolder(process.cwd() + '/' + folder)
    })

    files.forEach(function(file) {
      if(typeof file === 'object') {
        Helpers.copyFile(__dirname + '/../' + file.src, process.cwd() + '/' + file.target, file.callback)
      } else {
        Helpers.copyFile(__dirname + '/../' + file, process.cwd() + '/' + file)
      }
    })

    Helpers.addTestCommandToPackageFile()
    Helpers.addBusterJsDependencyToPackageFile()

    if(env.license) {
      Helpers.License.setup()
    }
  })

program
  .command('update')
  .description("Update some parts of the current project folder. (package.json, closure compiler)")
  .action(function(env, options) {
    // Helpers.ClosureCompiler.setup()
    Helpers.addTestCommandToPackageFile()
    Helpers.addBusterJsDependencyToPackageFile()
  })

program
  .command('license')
  .description("Add the MIT license to the project folder and the README.")
  .action(function(env, options) {
    Helpers.License.setup()
  })

program.parse(process.argv)
