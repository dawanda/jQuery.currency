if (typeof require == "function" && typeof module == "object") {
    buster = require("buster-core");
}

(function () {
    var CHANNEL = "/event-emitter/message";
    var DIRECT_CHANNEL = "/event-emitter/client/";

    var bayeuxEmitter = {
        create: function (client, opt) {
            var messenger = buster.create(this);
            messenger.client = client;
            messenger.emitter = buster.eventEmitter.create();
            messenger.listeners = [];
            messenger.id = opt && opt.id || uuid();
            return messenger;
        },

        on: function (topic, callback) {
            this.emitter.on(topic, callback);
        },

        onMessage: function (callback) {
            this.listeners.push(callback);
        },

        emit: function (topic, data) {
            return this.client.publish(CHANNEL, {
                data: data,
                topic: topic,
                clientId: this.id
            });
        },

        connect: function (callback) {
            var self = this;
            var deferred = nth(2, callback);
            var subscriber = function (msg) { processMessage.call(self, msg); };
            subscribe.call(this, deferred, CHANNEL, subscriber);
            subscribe.call(this, deferred, DIRECT_CHANNEL + this.id, subscriber);
        },

        disconnect: function () {
            return this.client.disconnect();
        },

        bind: function () {
            return this.emitter.bind.apply(this.emitter, arguments);
        }
    };

    function createDirectedClient(client, id) {
        return {
            emit: function (topic, data) {
                return client.publish(DIRECT_CHANNEL + id, {
                    topic: topic,
                    data: data
                });
            }
        };
    }

    function processMessage(message) {
        message.client = createDirectedClient(this.client, message.clientId);
        this.emitter.emit(message.topic, message);

        for (var i = 0, l = this.listeners.length; i < l; ++i) {
            this.listeners[i](message);
        }
    }

    function nth(n, callback) {
        var count = 0;
        return function () {
            if (++count == n) callback();
        };
    }

    function subscribe(callback, channel, subscriber) {
        var subscription = this.client.subscribe(channel, subscriber);
        subscription.callback(callback);
        subscription.errback(callback);
    }

    function uuid() {
        return [new Date().getTime(), Math.floor(Math.random() * 1000)].join("-");
    }

    if (typeof module == "object") {
        module.exports = bayeuxEmitter;
    } else {
        buster.bayeuxEmitter = bayeuxEmitter;
    }
}());
