if (typeof require == "function" && typeof module == "object") {
    var buster = require("buster");
    var faye = require("faye");
    buster.bayeuxEmitter = require("../lib/buster-bayeux-emitter");
}

var assert = buster.assert;
var refute = buster.refute;

buster.testCase("bayeux emitter", {
    setUp: function (done) {
        this.url = "http://localhost:7777/";
        var mc = new faye.NodeAdapter({ mount: "/" });
        this.server = require("http").createServer();
        mc.attach(this.server);
        var client = this.client = buster.bayeuxEmitter.create(new faye.Client(this.url));

        this.server.listen(7777, function () {
            client.connect(done);
        });
    },

    tearDown: function (done) {
        this.client.disconnect();
        setTimeout(function () {
            this.server.on("close", done);
            this.server.close();
        }.bind(this), 5)
    },

    "should emit event": function (done) {
        this.client.on("testrunner:event", function (msg) {
            assert.equals(msg.data, 42);
            done();
        });

        this.client.emit("testrunner:event", 42);
    },

    "should use existing client id": function () {
        var client = buster.bayeuxEmitter.create(new faye.Client(this.url), { id: 2 });
        assert.equals(client.id, 2);
    },

    "should assign a client id": function () {
        assert.defined(this.client.id);
    },

    "should assign unique client ids": function () {
        refute.equals(this.client.id, buster.bayeuxEmitter.create().id);
    },

    "should emit envelope with clientId of sender": function (done) {
        var client = this.client;

        client.on("hello", function (msg) {
            assert.equals(msg.clientId, client.id);
            done();
        });

        client.emit("hello");
    },

    "should subscribe to directed messages": function (done) {
        this.client.on("testrunner:event", function (msg) {
            msg.client.emit("psst", 42);
        });

        this.client.on("psst", function (msg) {
            assert.equals(msg.data, 42);
            done();
        });

        this.client.emit("testrunner:event");
    },

    "should subscribe to any event": function (done) {
        this.client.onMessage(function (msg) {
            assert.equals(msg.data, 42);
            assert.equals(msg.topic, "msg");
            done();
        });

        this.client.emit("msg", 42);
    },

    "should allow colons in event names": function (done) {
        this.client.on("some:event", function () {
            assert(true, "Got the message, happy");
            done();
        });

        this.client.emit("some:event", {});
    },

    "should support bind": function (done) {
        var listener = this.spy();

        this.client.bind({
            "something:nasty": listener,
            "something:other": function () {
                assert.calledOnce(listener);
                done();
            }
        });

        this.client.emit("something:nasty");
        this.client.emit("something:other");
    }
});
